name: HaulHub Deployment

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

jobs:
  deploy-contracts:
    name: Deploy Smart Contracts
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./contracts
        
      - name: Run contract tests
        run: npm test
        working-directory: ./contracts
      
      - name: Deploy to Polygon Mumbai
        if: contains(github.ref, 'beta') || contains(github.ref, 'rc')
        env:
          PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          POLYGON_MUMBAI_RPC_URL: ${{ secrets.POLYGON_MUMBAI_RPC_URL }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        run: npx hardhat run scripts/deploy.js --network mumbai
        working-directory: ./contracts
      
      - name: Deploy to Polygon Mainnet
        if: "!contains(github.ref, 'beta') && !contains(github.ref, 'rc')"
        env:
          PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          POLYGON_MAINNET_RPC_URL: ${{ secrets.POLYGON_MAINNET_RPC_URL }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        run: npx hardhat run scripts/deploy.js --network polygon
        working-directory: ./contracts
      
      - name: Save contract addresses
        run: |
          mkdir -p deployment
          cp deployedAddresses.json deployment/
        working-directory: ./contracts
      
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: contract-addresses
          path: contracts/deployment/

  build-client:
    name: Build Client
    runs-on: ubuntu-latest
    needs: [deploy-contracts]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download contract addresses
        uses: actions/download-artifact@v3
        with:
          name: contract-addresses
          path: ./contracts/deployment
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./client
      
      - name: Set environment variables
        run: |
          cp ./contracts/deployment/deployedAddresses.json ./client/public/
          
          # Determine which network to use based on tag
          if [[ "${{ github.ref }}" == *"beta"* || "${{ github.ref }}" == *"rc"* ]]; then
            echo "REACT_APP_NETWORK=mumbai" >> .env
            echo "REACT_APP_POLYGON_RPC_URL=${{ secrets.POLYGON_MUMBAI_RPC_URL }}" >> .env
          else
            echo "REACT_APP_NETWORK=polygon" >> .env
            echo "REACT_APP_POLYGON_RPC_URL=${{ secrets.POLYGON_MAINNET_RPC_URL }}" >> .env
          fi
          
          echo "REACT_APP_API_URL=https://api.haulhub.io/api" >> .env
          echo "REACT_APP_MAPBOX_API_KEY=${{ secrets.MAPBOX_API_KEY }}" >> .env
        working-directory: ./client
      
      - name: Build client
        run: npm run build
        working-directory: ./client
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: client/build

  build-server:
    name: Build Server
    runs-on: ubuntu-latest
    needs: [deploy-contracts]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download contract addresses
        uses: actions/download-artifact@v3
        with:
          name: contract-addresses
          path: ./contracts/deployment
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./server
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: server/

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-client, build-server]
    if: contains(github.ref, 'beta') || contains(github.ref, 'rc')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download client build
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: ./client/build
      
      - name: Download server build
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: ./server
      
      - name: Download contract addresses
        uses: actions/download-artifact@v3
        with:
          name: contract-addresses
          path: ./contracts/deployment
      
      - name: Deploy to staging server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            cd /var/www/haulhub-staging
            rm -rf client/build server/*
            mkdir -p client/build server contracts/deployment
      
      - name: Copy files to staging server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          source: "./client/build/*, ./server/*, ./docker/*, ./contracts/deployment/*"
          target: "/var/www/haulhub-staging"
          strip_components: 0
      
      - name: Restart services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            cd /var/www/haulhub-staging
            docker-compose -f docker/docker-compose.yml down
            docker-compose -f docker/docker-compose.yml up -d

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-client, build-server]
    if: "!contains(github.ref, 'beta') && !contains(github.ref, 'rc')"
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download client build
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: ./client/build
      
      - name: Download server build
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: ./server
      
      - name: Download contract addresses
        uses: actions/download-artifact@v3
        with:
          name: contract-addresses
          path: ./contracts/deployment
      
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /var/www/haulhub
            rm -rf client/build server/*
            mkdir -p client/build server contracts/deployment
      
      - name: Copy files to production server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          source: "./client/build/*, ./server/*, ./docker/*, ./contracts/deployment/*"
          target: "/var/www/haulhub"
          strip_components: 0
      
      - name: Restart services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /var/www/haulhub
            docker-compose -f docker/docker-compose.yml down
            docker-compose -f docker/docker-compose.yml up -d